{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"reference/SUMMARY/","title":"API Reference","text":"<ul> <li>bookacle<ul> <li>chat</li> <li>cli</li> <li>conf<ul> <li>config</li> </ul> </li> <li>document</li> <li>loaders</li> <li>models<ul> <li>embedding</li> <li>message</li> <li>qa</li> <li>summarization</li> </ul> </li> <li>splitters</li> <li>tokenizer</li> <li>tree<ul> <li>builder</li> <li>clustering</li> <li>config</li> <li>retriever</li> <li>structures</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/bookacle/","title":"Bookacle","text":""},{"location":"reference/bookacle/chat/","title":"Chat","text":"<p>Chat module for conversing with a RAPTOR RAG-based LLM in the terminal.</p>"},{"location":"reference/bookacle/chat/#bookacle.chat.Chat","title":"Chat","text":"<pre><code>Chat(\n    retriever,\n    qa_model,\n    console,\n    history_file=\".bookacle-chat-history.txt\",\n    user_avatar=\"\ud83d\udc64\",\n)\n</code></pre> <p>A terminal-based chat interface for interacting with a RAPTOR RAG-based LLM.</p> <p>Attributes:</p> Name Type Description <code>retriever</code> <code>RetrieverLike</code> <p>Retriever to use for retrieving relevant context.</p> <code>qa_model</code> <code>QAModelLike</code> <p>QA model to use for answering questions.</p> <code>console</code> <code>Console</code> <p>Rich Console to use for displaying messages.</p> <code>history_file</code> <code>str</code> <p>File to store chat history.</p> <code>user_avatar</code> <code>str</code> <p>Avatar to use for the user in the chat UI.</p> <p>Parameters:</p> Name Type Description Default <code>retriever</code> <code>RetrieverLike</code> <p>Retriever to use for retrieving relevant context.</p> required <code>qa_model</code> <code>QAModelLike</code> <p>QA model to use for answering questions.</p> required <code>console</code> <code>Console</code> <p>Rich Console to use for displaying messages.</p> required <code>history_file</code> <code>str</code> <p>File to store chat history. The file is created in the home directory.</p> <code>'.bookacle-chat-history.txt'</code> <code>user_avatar</code> <code>str</code> <p>Avatar to use for the user in the chat UI.</p> <code>'\ud83d\udc64'</code>"},{"location":"reference/bookacle/chat/#bookacle.chat.Chat.display_ai_msg_stream","title":"display_ai_msg_stream","text":"<pre><code>display_ai_msg_stream(messages)\n</code></pre> <p>Display an AI message stream in the chat UI.</p> <p>Parameters:</p> Name Type Description Default <code>messages</code> <code>Iterator[Message]</code> <p>Stream of AI messages to display.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The complete message as a string.</p>"},{"location":"reference/bookacle/chat/#bookacle.chat.Chat.invoke_qa_model","title":"invoke_qa_model","text":"<pre><code>invoke_qa_model(\n    tree,\n    question,\n    history=None,\n    stream=True,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Invoke the QA model to answer a question.</p> <p>Parameters:</p> Name Type Description Default <code>tree</code> <code>Tree</code> <p>RAPTOR tree that should be used for RAG.</p> required <code>question</code> <code>str</code> <p>The question to answer.</p> required <code>history</code> <code>list[Message] | None</code> <p>Chat history.</p> <code>None</code> <code>stream</code> <code>bool</code> <p>Whether to stream the AI response.</p> <code>True</code> <code>**args</code> <code>tuple[Any]</code> <p>Additional positional arguments to pass to the retriever.</p> <code>()</code> <code>**kwargs</code> <code>dict[str, Any]</code> <p>Additional keyword arguments to pass to the retriever.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Message</code> <p>The response from the QA model.</p>"},{"location":"reference/bookacle/chat/#bookacle.chat.Chat.run","title":"run","text":"<pre><code>run(\n    tree,\n    initial_chat_message=\"\",\n    system_prompt=\"\",\n    stream=True,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Run the chat interface.</p> <p>Parameters:</p> Name Type Description Default <code>tree</code> <code>Tree</code> <p>RAPTOR tree that should be used for RAG.</p> required <code>initial_chat_message</code> <code>str</code> <p>Initial message to display in the chat.</p> <code>''</code> <code>system_prompt</code> <code>str</code> <p>System prompt that should be used for the QA model.</p> <code>''</code> <code>stream</code> <code>bool</code> <p>Whether to stream the AI response.</p> <code>True</code> <code>*args</code> <code>tuple[Any]</code> <p>Additional positional arguments to pass to the retriever.</p> <code>()</code> <code>**kwargs</code> <code>dict[str, Any]</code> <p>Additional keyword arguments to pass to the retriever.</p> <code>{}</code>"},{"location":"reference/bookacle/cli/","title":"Cli","text":""},{"location":"reference/bookacle/document/","title":"Document","text":"<p>This module defines the document structure used throughout the package.</p>"},{"location":"reference/bookacle/document/#bookacle.document.Document","title":"Document","text":"<p>               Bases: <code>TypedDict</code></p> <p>A TypedDict that represents a page in a PDF file.</p> <p>Attributes:</p> Name Type Description <code>page_content</code> <code>str</code> <p>The text content of the page.</p> <code>metadata</code> <code>NotRequired[dict[str, Any]]</code> <p>Additional metadata about the page.</p>"},{"location":"reference/bookacle/loaders/","title":"Loaders","text":"<p>This module defines functions for loading PDF documents and some utilities to manage loaders.</p>"},{"location":"reference/bookacle/loaders/#bookacle.loaders.LOADER_MANAGER","title":"LOADER_MANAGER  <code>module-attribute</code>","text":"<pre><code>LOADER_MANAGER = LoaderManager()\n</code></pre> <p>Default loader manager.</p>"},{"location":"reference/bookacle/loaders/#bookacle.loaders.LoaderLike","title":"LoaderLike","text":"<p>               Bases: <code>Protocol</code></p> <p>A protocol that all document loaders should follow.</p>"},{"location":"reference/bookacle/loaders/#bookacle.loaders.LoaderLike.__call__","title":"__call__","text":"<pre><code>__call__(file_path, start_page=0, end_page=None)\n</code></pre> <p>Load a PDF document.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The path to the PDF file.</p> required <code>start_page</code> <code>int</code> <p>The starting (0-based) page number in the PDF to begin reading from.</p> <code>0</code> <code>end_page</code> <code>int | None</code> <p>The ending (0-based) page number to stop reading at (non-inclusive).       When <code>None</code>, all pages in the PDF are read.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Document]</code> <p>Pages in the file.</p>"},{"location":"reference/bookacle/loaders/#bookacle.loaders.LoaderManager","title":"LoaderManager","text":"<p>               Bases: <code>UserDict[str, LoaderLike]</code></p> <p>Manager to maintain registry of all document loaders.</p> <p>It behaves like a dictionary, where each document loader is registered to a name.</p> Example <pre><code>from bookacle.loaders import LoaderManager, register_loader\nfrom langchain_core.documents import Document\n\nmanager = LoaderManager()\n\n@register_loader(name=\"custom_loader\", manager=manager)\ndef doc_loader(file_path: str, start_page: int = 0, end_page: int | None = None) -&gt; list[Document]:\n    ...\n\nmanager[\"custom_loader\"] is doc_loader\n</code></pre>"},{"location":"reference/bookacle/loaders/#bookacle.loaders.LoaderManager.enum","title":"enum  <code>property</code>","text":"<pre><code>enum\n</code></pre> <p>Obtain the names of the document loaders as an Enum.</p> <p>Useful in the CLI for <code>--help</code>.</p>"},{"location":"reference/bookacle/loaders/#bookacle.loaders.register_loader","title":"register_loader","text":"<pre><code>register_loader(name, manager=None)\n</code></pre> <p>A decorator that registers a loader function with the loader manager.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name to map the loader function to.</p> required <code>manager</code> <code>LoaderManager | None</code> <p>The manager to register the function with.      If <code>None</code>, <code>LOADER_MANAGER</code> is used.</p> <code>None</code>"},{"location":"reference/bookacle/loaders/#bookacle.loaders.pymupdf4llm_loader","title":"pymupdf4llm_loader","text":"<pre><code>pymupdf4llm_loader(file_path, start_page=0, end_page=None)\n</code></pre> <p>Document loader which uses <code>pymupdf4llm</code> to load the PDF as Markdown.</p> <p>Can be accessed using the name <code>'pymupdf4llm'</code> via the default loader manager.</p> <p>It implements the LoaderLike protocol.</p>"},{"location":"reference/bookacle/loaders/#bookacle.loaders.pymupdf_loader","title":"pymupdf_loader","text":"<pre><code>pymupdf_loader(file_path, start_page=0, end_page=None)\n</code></pre> <p>Document loader which uses <code>pymupdf</code> to load the PDF as text.</p> <p>Can be accessed using the name <code>'pymupdf'</code> via the default loader manager.</p> <p>It implements the LoaderLike protocol.</p>"},{"location":"reference/bookacle/splitters/","title":"Splitters","text":"<p>This module implements document splitters for document chunking.</p>"},{"location":"reference/bookacle/splitters/#bookacle.splitters.DocumentSplitterLike","title":"DocumentSplitterLike","text":"<p>               Bases: <code>Protocol</code></p> <p>A protocol that defines the methods that a document splitter should implement.</p>"},{"location":"reference/bookacle/splitters/#bookacle.splitters.DocumentSplitterLike.__call__","title":"__call__","text":"<pre><code>__call__(documents, chunk_size=100, chunk_overlap=0)\n</code></pre> <p>Split a list of documents into smaller chunks.</p> <p>Parameters:</p> Name Type Description Default <code>documents</code> <code>list[Document]</code> <p>The list of documents to be split.</p> required <code>chunk_size</code> <code>int</code> <p>The size of each chunk.</p> <code>100</code> <code>chunk_overlap</code> <code>int</code> <p>The overlap between consecutive chunks.</p> <code>0</code> <p>Returns:</p> Type Description <code>list[Document]</code> <p>The list of documents after splitting into chunks.</p>"},{"location":"reference/bookacle/splitters/#bookacle.splitters.HuggingFaceTextSplitter","title":"HuggingFaceTextSplitter","text":"<pre><code>HuggingFaceTextSplitter(tokenizer, separators=None)\n</code></pre> <p>Text-based document splitter which uses a HuggingFace tokenizer to calculate length when splitting.</p> <p>It uses Langchain\u2019s RecursiveCharacterTextSplitter and expects the list of documents to be in plain text.</p> <p>It implements the DocumentSplitterLike protocol.</p> <p>Attributes:</p> Name Type Description <code>tokenizer</code> <p>The HuggingFace tokenizer to use for calculating length.</p> <code>separators</code> <p>The list of separators to use for splitting the document.</p> <p>Parameters:</p> Name Type Description Default <code>tokenizer</code> <code>PreTrainedTokenizerBase</code> <p>The HuggingFace tokenizer to use for calculating length.</p> required <code>separators</code> <code>list[str] | None</code> <p>The list of separators to use.         When <code>None</code>, the default separators are used: <code>[\"\\n\\n\", \"\\n\", \".\", \"!\", \"?\"]</code>.</p> <code>None</code>"},{"location":"reference/bookacle/splitters/#bookacle.splitters.HuggingFaceMarkdownSplitter","title":"HuggingFaceMarkdownSplitter","text":"<pre><code>HuggingFaceMarkdownSplitter(tokenizer)\n</code></pre> <p>Markdown-based document splitter which uses a HuggingFace tokenizer to calculate length of chunks when splitting.</p> <p>It uses Langchain\u2019s MarkdownTextSplitter and expects the list of documents to be in Markdown.</p> <p>It implements the DocumentSplitterLike protocol.</p> <p>Attributes:</p> Name Type Description <code>tokenizer</code> <p>The HuggingFace tokenizer to use for calculating length.</p> <p>Parameters:</p> Name Type Description Default <code>tokenizer</code> <code>PreTrainedTokenizerBase</code> <p>The HuggingFace tokenizer to use to calculate length.</p> required"},{"location":"reference/bookacle/splitters/#bookacle.splitters.RaptorSplitter","title":"RaptorSplitter","text":"<pre><code>RaptorSplitter(tokenizer, *, separators=None)\n</code></pre> <p>Document splitter which implements the chunking technique as defined in the RAPTOR paper.</p> <p>It expects a tokenizer which implements the TokenizerLike protocol to calculate the length of chunks.</p> <p>For more details, see: https://github.com/parthsarthi03/raptor/blob/7da1d48a7e1d7dec61a63c9d9aae84e2dfaa5767/raptor/utils.py#L22.</p> <p>It implements the DocumentSplitterLike protocol.</p> <p>Attributes:</p> Name Type Description <code>tokenizer</code> <p>Tokenizer to use for calculating chunk lengths.</p> <code>separators</code> <p>The list of separators to use for splitting the document.</p> <p>Parameters:</p> Name Type Description Default <code>tokenizer</code> <code>TokenizerLike</code> <p>Tokenizer to use for calculating chunk lengths.</p> required <code>separators</code> <code>list[str] | None</code> <p>The list of separators to use.         When <code>None</code>, the default separators are used: <code>[\".\", \"!\", \"?\", \"\\n\"]</code>.</p> <code>None</code>"},{"location":"reference/bookacle/splitters/#bookacle.splitters.RaptorSplitter.split_single_document","title":"split_single_document","text":"<pre><code>split_single_document(document, chunk_size, chunk_overlap)\n</code></pre> <p>Split a single document into chunks.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p>Document to split into chunks.</p> required <code>chunk_size</code> <code>int</code> <p>Maximum size of each chunk.</p> required <code>chunk_overlap</code> <code>int</code> <p>Overlap between each chunk.</p> required"},{"location":"reference/bookacle/tokenizer/","title":"Tokenizer","text":""},{"location":"reference/bookacle/tokenizer/#bookacle.tokenizer.TokenizerLike","title":"TokenizerLike","text":"<p>               Bases: <code>Protocol</code></p> <p>A protocol that all tokenizers should follow.</p>"},{"location":"reference/bookacle/tokenizer/#bookacle.tokenizer.TokenizerLike.encode","title":"encode","text":"<pre><code>encode(*args, **kwargs)\n</code></pre> <p>Tokenize the input text into a list of integers.</p> <p>Returns:</p> Type Description <code>list[int]</code> <p>Tokenized input.</p>"},{"location":"reference/bookacle/conf/","title":"Conf","text":""},{"location":"reference/bookacle/conf/config/","title":"Config","text":""},{"location":"reference/bookacle/models/","title":"Models","text":""},{"location":"reference/bookacle/models/embedding/","title":"Embedding","text":"<p>This module defines protocols and concrete implementations for embedding models used for text representation.</p>"},{"location":"reference/bookacle/models/embedding/#bookacle.models.embedding.EmbeddingModelLike","title":"EmbeddingModelLike","text":"<p>               Bases: <code>Protocol</code></p> <p>A protocol that defines the methods and attributes that an embedding model should implement.</p>"},{"location":"reference/bookacle/models/embedding/#bookacle.models.embedding.EmbeddingModelLike.tokenizer","title":"tokenizer  <code>property</code>","text":"<pre><code>tokenizer\n</code></pre> <p>The tokenizer used by the model.</p>"},{"location":"reference/bookacle/models/embedding/#bookacle.models.embedding.EmbeddingModelLike.model_max_length","title":"model_max_length  <code>property</code>","text":"<pre><code>model_max_length\n</code></pre> <p>The maximum length of a sequence supported by the model.</p>"},{"location":"reference/bookacle/models/embedding/#bookacle.models.embedding.EmbeddingModelLike.embed","title":"embed","text":"<pre><code>embed(text)\n</code></pre> <p>Embed the input text or list of texts.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str | list[str]</code> <p>The input text or list of input texts to embed.</p> required <p>Returns:</p> Type Description <code>list[float] | list[list[float]]</code> <p>The embeddings of the input text or list of texts.</p>"},{"location":"reference/bookacle/models/embedding/#bookacle.models.embedding.SentenceTransformerEmbeddingModel","title":"SentenceTransformerEmbeddingModel","text":"<pre><code>SentenceTransformerEmbeddingModel(\n    model_name, *, use_gpu=False\n)\n</code></pre> <p>An embedding model that uses the SentenceTransformer library.</p> <p>It implements the EmbeddingModelLike protocol.</p> <p>Attributes:</p> Name Type Description <code>model_name</code> <code>str</code> <p>The name of the model to use.</p> <code>use_gpu</code> <code>bool</code> <p>Whether to use the GPU for inference.</p> <code>model</code> <code>SentenceTransformer</code> <p>The SentenceTransformer model.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>The name of the model to use.</p> required <code>use_gpu</code> <code>bool</code> <p>Whether to use the GPU for inference.</p> <code>False</code>"},{"location":"reference/bookacle/models/message/","title":"Message","text":"<p>This module defines data structures for representing messages exchanged in a conversation with a language model (LLM).</p>"},{"location":"reference/bookacle/models/message/#bookacle.models.message.Message","title":"Message","text":"<p>               Bases: <code>TypedDict</code></p> <p>A TypedDict that represents a message in a conversation with an LLM.</p> <p>Attributes:</p> Name Type Description <code>role</code> <code>Literal['user', 'assistant', 'system', 'tool']</code> <p>The role of the message sender.</p> <code>content</code> <code>str</code> <p>The content of the message.</p>"},{"location":"reference/bookacle/models/qa/","title":"Qa","text":""},{"location":"reference/bookacle/models/summarization/","title":"Summarization","text":""},{"location":"reference/bookacle/tree/","title":"Tree","text":""},{"location":"reference/bookacle/tree/builder/","title":"Builder","text":""},{"location":"reference/bookacle/tree/clustering/","title":"Clustering","text":""},{"location":"reference/bookacle/tree/config/","title":"Config","text":""},{"location":"reference/bookacle/tree/retriever/","title":"Retriever","text":""},{"location":"reference/bookacle/tree/structures/","title":"Structures","text":""}]}